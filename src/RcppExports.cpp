// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// robRmRcpp
SEXP robRmRcpp(arma::mat sigma1, arma::mat y, double Lim, NumericVector aux);
RcppExport SEXP _Robpvc_robRmRcpp(SEXP sigma1SEXP, SEXP ySEXP, SEXP LimSEXP, SEXP auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type aux(auxSEXP);
    rcpp_result_gen = Rcpp::wrap(robRmRcpp(sigma1, y, Lim, aux));
    return rcpp_result_gen;
END_RCPP
}
// gridcDCC
SEXP gridcDCC(arma::mat Qb, arma::mat s, double sigma);
RcppExport SEXP _Robpvc_gridcDCC(SEXP QbSEXP, SEXP sSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Qb(QbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gridcDCC(Qb, s, sigma));
    return rcpp_result_gen;
END_RCPP
}
// loglik_cDCC
SEXP loglik_cDCC(arma::vec par, arma::mat Qb, arma::mat s, double sigma);
RcppExport SEXP _Robpvc_loglik_cDCC(SEXP parSEXP, SEXP QbSEXP, SEXP sSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qb(QbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cDCC(par, Qb, s, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cor_cDCC
SEXP cor_cDCC(arma::vec par, arma::mat Qb, arma::mat s);
RcppExport SEXP _Robpvc_cor_cDCC(SEXP parSEXP, SEXP QbSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qb(QbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(cor_cDCC(par, Qb, s));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Robpvc_robRmRcpp", (DL_FUNC) &_Robpvc_robRmRcpp, 4},
    {"_Robpvc_gridcDCC", (DL_FUNC) &_Robpvc_gridcDCC, 3},
    {"_Robpvc_loglik_cDCC", (DL_FUNC) &_Robpvc_loglik_cDCC, 4},
    {"_Robpvc_cor_cDCC", (DL_FUNC) &_Robpvc_cor_cDCC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Robpvc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
